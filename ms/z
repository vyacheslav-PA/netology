## Тестовые задания для кандидата на должность “ Разработчик платформ контейнеризации ”
### Задание №1

```

1. Написать Dockerfile для nginx (собираем с нуля из базового образа ОС).
Конфигурация nginx должна “приезжать” снаружи, логи должны сохраняться вне контейнера
2. Запустить 3 контейнера nginx с разными index-страницами (чтобы было понятно где какой). Все контейнеры должны работать одновременно.
3. Настроить балансировку для всех контейнеров, например по localhost:8888 (nginx, haproxy и т.д.)
4*. Автоматически выполнить пп.1-2 при помощи gitlab-CI, ansible или им подобных инструментов.

```

Задание №2

1. Развернуть кластер kubernetes, выдерживающий отказ одного узла кластера,  любым из возможных способов. Доказать то, что он отказоустойчивый.
2. Развернуть Jenkins. Можно при помощи docker. С помощью jenkins создать контейнер с python/golang web приложением (Сложность уровня hello-world), развернуть приложение внутри кластера kubernetes. Исходный код приложения необходимо забирать из системы контроля версий. Можно использовать github.com. Самостоятельно  установленный инстанс gitlab будет плюсом. Gitlab можно так же развернуть при помощи docker. Обеспечить сохранение данных между перезапусками контейнеров, в случае использования docker.
3. Установить helm. Найти готовый пакет кластера postgres с репликацией и установить.



### Задание 1

1. Написать Dockerfile для nginx(собираем с нуля из базовой версии ОС)
Конфигурация nginx должна приезжать снаружи, логи должны сохраняться вне контейнера

``` 
# Dockerfile
FROM ubuntu:22.04 # базовый образ ubuntu
LABEL description="Build nginx" # description
VOLUME /var/log/nginx/ #подключение внешнего тома для записи логов на хостовую машину
RUN apt update  && apt install nginx -y #установка  nginx в контейнер
COPY nginx.conf /etc/nginx # копировать с хостовой машины конфиг-файл для nginx
ENTRYPOINT ["nginx", "-g", "daemon off;"] #  команда для запуска контейнера

```
# создать том докер для записи логов

```

 docker volume create logs_nginx

```
#  volume для хранения старниц helloworld(index(1-3))
 ```
docker volume create www1
docker volume create www2
docker volume create www3

```
#  собрать образ контейнера
```

 docker build -t . nginx_ubnt:0.0.1

```
#  запуск контейнера c подключением внешних томов для записи логов и index.html стартовой страницы
 ```
 docker run -it  --name nginx1 -p 8080:80 -v www1:/var/www/html -v logs_nginx:/var/log/nginx  nginx_ubnt:0.0.1 

```

2. Запустить 3 контейнера nginx  с разными index страницами(чтобы было понятно где какой). Все контейнеры должны работать одноверменно.

# три контейнера доступны по разным портам

```

  docker run --rm --ip 172.17.0.2 -it  --name nginx1 -p 8081:80 -v www1:/var/www/html -v logs_nginx:/var/log/nginx nginx_ubnt:0.0.1 
  docker run --rm --ip 172.17.0.3 -it  --name nginx2 -p 8082:80 -v www2:/var/www/html -v logs_nginx:/var/log/nginx nginx_ubnt:0.0.1 
  docker run --rm --ip 172.17.0.4 -it  --name nginx3 -p 8083:80 -v www3:/var/www/html -v logs_nginx:/var/log/nginx nginx_ubnt:0.0.1 

```

3. настроить балансировку для всех контейнеров, например по localhost:8888(nginx,haproxy,...)

# конфиг-файл для балансировщика нагрузки nginx
```
events {
        worker_connections 1024;
        multi_accept on;
}
http {
upstream load_balancer {
    #   по умолчанию балансировка происходит последовательно 
        server 172.17.0.2; # ip контейнера 1
        server 172.17.0.3; # ip контейнера 2
        server 172.17.0.4; # ip контейнера 3
}
 server {
       listen 80;
        location / {
            proxy_pass http://load_balancer;
    }
}
}

```
#  запуск балансировщика nginx  с подключением конфигурции с volume load_balancer 
# балансировщик доступен по порту :8888
docker run --rm --name balancer -p 8888:80 -v load_balance:/etc/nginx/ -it  balancer
#  при каждом новом запросе к балансировщику сервер отдает страницы index последовательно с разных volume, подключеных к контейнерам

4*. Автоматически выполнить п 1-2 при помощи gitlab-ci, ansible, ...

#### Ansible
#  файл со списком серверов
```
[servers_all]
nginx1 ansible_host=192.168.56.102 ansible_user=osboxes

```
playbook.yaml

```

- hosts: servers_all
  become: yes
  become_method: sudo
  tasks:
    - name: install dependencies # установка зависимостей для docker
      apt:
        name: "{{item}}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
    - name: add GPG key #ключ репозитория docker
      apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present
    - name: add docker repository to apt # добавить репозиторий
      apt_repository:
         repo: deb https://download.docker.com/linux/ubuntu bionic stable
         state: present
    - name: install docker # установка docker
      apt:
          name: "{{item}}"
          state: latest
          update_cache: yes
      loop:
         - docker-ce
         - docker-ce-cli
         - containerd.io     
    - name: check docker is active # проверка сервиса docker
      service:
        name: docker
        state: started
        enabled: yes
    - name: Ensure group "docker" exists # проверка существования пользователя
      ansible.builtin.group:
          name: docker
          state: present
    - name: adding ubuntu to docker group # добавить пользователя в группу докера
      user:
          name: osboxes
          groups: docker
          append: yes
    - name: Pull an image # скачать образ 
      community.docker.docker_image_p.vscode/apisecretgiga.pyull:
          name: pwaawp/nginx_ubnt:0.0.1
    - name: Create a volume # создать том docker
      community.docker.docker_volume:
           name: '{{item}}'
      loop:
         - www1
         - www2 
         - www3
         - logs_nginx
    - name: Copy files. # копировать index1
      copy:
         src: '/home/pwa/git/ms/ansible/www/1/index.html'
         dest: '/var/lib/docker/volumes/www1/_data' 
    - name: Copy files. # копировать index2
      copy:
         src: '/home/pwa/git/ms/ansible/www/2/index.html'
         dest: '/var/lib/docker/volumes/www2/_data' 
    - name: Copy files. # копировать index3
      copy:
         src: '/home/pwa/git/ms/ansible/www/3/index.html'
         dest: '/var/lib/docker/volumes/www3/_data'    
    - name: Create a data container # создать контейнер докер nginx1
      community.docker.docker_container:
         name: nginx1
         image: pwaawp/nginx_ubnt:0.0.1 
         published_ports: 
         - 8081:80
         volumes:
         - www1:/var/www/html
         - logs_nginx:/var/log/nginx
    - name: Create a data container # создать контейнер докер nginx2
      community.docker.docker_container:
         name: nginx2
         image: pwaawp/nginx_ubnt:0.0.1 
         published_ports: 
         - 8082:80
         volumes:
         - www2:/var/www/html
         - logs_nginx:/var/log/nginx
    - name: Create a data container # создать контейнер докер nginx3
      community.docker.docker_container:
         name: nginx3
         image: pwaawp/nginx_ubnt:0.0.1 
         published_ports: 
         - 8083:80
         volumes:
         - www3:/var/www/html
         - logs_nginx:/var/log/nginx         

# три контейнера доступны и отдают каждый свой index.html

```

ssh osboxes@192.168.56.102
osboxes@osboxes:~$ docker ps # посмотреть запущенные контейнеры
CONTAINER ID   IMAGE                     COMMAND                  CREATED         STATUS         PORTS                  NAMES
509c64e56cf8   pwaawp/nginx_ubnt:0.0.1   "nginx -g 'daemon of…"   2 minutes ago   Up 2 minutes   0.0.0.0:8083->80/tcp   nginx3
98bbe3d6130b   pwaawp/nginx_ubnt:0.0.1   "nginx -g 'daemon of…"   2 minutes ago   Up 2 minutes   0.0.0.0:8082->80/tcp   nginx2
f424a0a31588   pwaawp/nginx_ubnt:0.0.1   "nginx -g 'daemon of…"   2 minutes ago   Up 2 minutes   0.0.0.0:8081->80/tcp   nginx1
osboxes@osboxes:~$ curl http://localhost:8081 # запрос к первому контейнеру
helloWorld! №1
osboxes@osboxes:~$ curl http://localhost:8082 # запрос ко второму контейнеру
helloWorld! №2
osboxes@osboxes:~$ curl http://localhost:8083 # запрос к третьему контейнеру
helloWorld! №3
osboxes@osboxes:~$ 

```


### Задание 2

; 1. Развернуть кластер кубернетес, выдерживающий отказ одного узла кластера, любым из возможных способов. Доказать то, что он отказоустойчив.





2. Развернуть jenkins.  Можно при помощи Docker. С помощью Jenkins создать контейнер с python/golang web приложение ( сложность уровня hello-world), 
    развернуть приложение внутри кластера kubernetes, приложения необходимо забирать из системы контроля версий. Можно использовать github.com. 
    Самостоятельно установить инстанс gitlab будет плюсом. gitlab также можно развернуть
    при помощи Docker. Обеспечить сохранение данных между перезапусками контейнеров, в случае использования docker.

-rm --name balancer





    
3. Установить helm. Найти готовый пакет кластера postgress с репликацией и установить.